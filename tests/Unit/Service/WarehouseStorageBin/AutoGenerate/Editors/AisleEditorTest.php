<?php

namespace App\Tests\Unit\Service\WarehouseStorageBin\AutoGenerate\Editors;

use App\Dictionary\StorageBinAutoGenerationStorageLevelDictionary;
use App\DTO\WarehouseStorageBinAutoGenerateData;
use App\Entity\Warehouse;
use App\Entity\WarehouseStorageArea;
use App\Entity\WarehouseStorageBin;
use App\Repository\WarehouseStorageBinRepository;
use App\Service\WarehouseStorageBin\AutoGenerate\BinDataSetter;
use App\Service\WarehouseStorageBin\AutoGenerate\Editors\AisleEditor;
use App\Service\WarehouseStorageBin\AutoGenerate\Iterators\AisleIterator;
use App\Service\WarehouseStorageBin\AutoGenerate\Iterators\BinIteratorFactory;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityManagerInterface;
use Mockery;
use Mockery\Adapter\Phpunit\MockeryTestCase;

final class AisleEditorTest extends MockeryTestCase
{
    private ?BinDataSetter $binDataSetter;

    private ?EntityManagerInterface $manager;

    private ?BinIteratorFactory $binIteratorFactory;

    private ?WarehouseStorageBinRepository $warehouseStorageBinRepository;

    private ?WarehouseStorageBinAutoGenerateData $autoGenerateData;

    public function setUp(): void
    {
        parent::setUp();
        $this->binDataSetter                 = Mockery::mock(BinDataSetter::class);
        $this->manager                       = Mockery::mock(EntityManagerInterface::class);
        $this->binIteratorFactory            = Mockery::mock(BinIteratorFactory::class);
        $this->warehouseStorageBinRepository = Mockery::mock(WarehouseStorageBinRepository::class);
        $this->autoGenerateData              = Mockery::mock(WarehouseStorageBinAutoGenerateData::class);
    }

    public function tearDown(): void
    {
        $this->binDataSetter                 = null;
        $this->manager                       = null;
        $this->binIteratorFactory            = null;
        $this->warehouseStorageBinRepository = null;
        $this->autoGenerateData              = null;

        parent::tearDown();
    }

    public function testItSupports(): void
    {
        $this->autoGenerateData->shouldReceive('getStorageLevel')
                               ->once()
                               ->withNoArgs()
                               ->andReturn(StorageBinAutoGenerationStorageLevelDictionary::AISLE);

        $aisleEditor = new AisleEditor(
            $this->binDataSetter,
            $this->manager,
            $this->warehouseStorageBinRepository,
            $this->binIteratorFactory
        );

        self::assertTrue($aisleEditor->supports($this->autoGenerateData));
    }

    public function testItDoesNotSupports(): void
    {
        $this->autoGenerateData->shouldReceive('getStorageLevel')
                               ->once()
                               ->withNoArgs()
                               ->andReturn(StorageBinAutoGenerationStorageLevelDictionary::BAY);

        $aisleEditor = new AisleEditor(
            $this->binDataSetter,
            $this->manager,
            $this->warehouseStorageBinRepository,
            $this->binIteratorFactory
        );

        self::assertFalse($aisleEditor->supports($this->autoGenerateData));
    }

    public function testItCanEdit(): void
    {
        $aisleSerials = ['AA', 'AB'];

        $warehouse = Mockery::mock(Warehouse::class);
        $warehouse->shouldReceive('getId')
                  ->twice()
                  ->withNoArgs()
                  ->andReturn(1);

        $warehouseStorageArea = Mockery::mock(WarehouseStorageArea::class);
        $warehouseStorageArea->shouldReceive('getId')
                             ->twice()
                             ->withNoArgs()
                             ->andReturn(1);

        $binObject = Mockery::mock(WarehouseStorageBin::class);
        $child     = Mockery::mock(WarehouseStorageBin::class);
        $binObject->shouldReceive('getChildren')
                  ->once()
                  ->withNoArgs()
                  ->andReturn(new ArrayCollection([$child]));

        $child->shouldReceive('getChildren')
                  ->once()
                  ->withNoArgs()
                  ->andReturn(new ArrayCollection([]));

        $aisleIterator = Mockery::mock(AisleIterator::class);
        $aisleIterator->shouldReceive('toArray')
                      ->once()
                      ->withNoArgs()
                      ->andReturn($aisleSerials);

        $this->binIteratorFactory->shouldReceive('createIterator')
                                 ->once()
                                 ->with(Mockery::type('string'), $this->autoGenerateData)
                                 ->andReturn($aisleIterator);

        $this->autoGenerateData->shouldReceive('getWarehouse')
                               ->twice()
                               ->withNoArgs()
                               ->andReturn($warehouse);
        $this->autoGenerateData->shouldReceive('getWarehouseStorageArea')
                               ->twice()
                               ->withNoArgs()
                               ->andReturn($warehouseStorageArea);

        $this->warehouseStorageBinRepository->shouldReceive('getBinWithSerialsAndType')
                                            ->once()
                                            ->with(Mockery::type('array'), Mockery::type('string'))
                                            ->andReturn([$binObject]);

        $this->binDataSetter->shouldReceive('setData')
                            ->once()
                            ->with($binObject, $this->autoGenerateData)
                            ->andReturn($binObject);

        $this->binDataSetter->shouldReceive('setData')
                            ->once()
                            ->with($child, $this->autoGenerateData)
                            ->andReturn($child);

        $this->manager->shouldReceive('flush')
                      ->once()
                      ->withNoArgs()
                      ->andReturn();

        $aisleEditor = new AisleEditor(
            $this->binDataSetter,
            $this->manager,
            $this->warehouseStorageBinRepository,
            $this->binIteratorFactory
        );

        self::assertCount(2, $aisleEditor->edit($this->autoGenerateData));
    }
}
