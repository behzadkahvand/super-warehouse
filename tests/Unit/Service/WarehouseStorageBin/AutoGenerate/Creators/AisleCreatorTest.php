<?php

namespace App\Tests\Unit\Service\WarehouseStorageBin\AutoGenerate\Creators;

use App\Dictionary\StorageBinAutoGenerationStorageLevelDictionary;
use App\DTO\WarehouseStorageBinAutoGenerateData;
use App\Entity\Warehouse;
use App\Entity\WarehouseStorageArea;
use App\Entity\WarehouseStorageBin;
use App\Repository\WarehouseStorageBinRepository;
use App\Service\WarehouseStorageBin\AutoGenerate\BinDataSetter;
use App\Service\WarehouseStorageBin\AutoGenerate\BinFactory;
use App\Service\WarehouseStorageBin\AutoGenerate\Creators\AisleCreator;
use App\Service\WarehouseStorageBin\AutoGenerate\Iterators\AisleIterator;
use App\Service\WarehouseStorageBin\AutoGenerate\Iterators\BinIteratorFactory;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\UnitOfWork;
use Mockery;
use Mockery\Adapter\Phpunit\MockeryTestCase;

final class AisleCreatorTest extends MockeryTestCase
{
    private ?BinFactory $binFactory;

    private ?BinDataSetter $binDataSetter;

    private ?EntityManagerInterface $manager;

    private ?BinIteratorFactory $binIteratorFactory;

    private ?WarehouseStorageBinRepository $warehouseStorageBinRepository;

    private ?WarehouseStorageBinAutoGenerateData $autoGenerateData;

    public function setUp(): void
    {
        parent::setUp();
        $this->binFactory                    = Mockery::mock(BinFactory::class);
        $this->binDataSetter                 = Mockery::mock(BinDataSetter::class);
        $this->manager                       = Mockery::mock(EntityManagerInterface::class);
        $this->binIteratorFactory            = Mockery::mock(BinIteratorFactory::class);
        $this->warehouseStorageBinRepository = Mockery::mock(WarehouseStorageBinRepository::class);
        $this->autoGenerateData              = Mockery::mock(WarehouseStorageBinAutoGenerateData::class);
    }

    public function tearDown(): void
    {
        $this->binFactory                    = null;
        $this->binDataSetter                 = null;
        $this->manager                       = null;
        $this->binIteratorFactory            = null;
        $this->warehouseStorageBinRepository = null;
        $this->autoGenerateData              = null;

        parent::tearDown();
    }

    public function testItSupports(): void
    {
        $this->autoGenerateData->shouldReceive('getStorageLevel')
                               ->once()
                               ->withNoArgs()
                               ->andReturn(StorageBinAutoGenerationStorageLevelDictionary::AISLE);

        $aisleCreator = new AisleCreator(
            $this->binFactory,
            $this->binDataSetter,
            $this->manager,
            $this->binIteratorFactory,
            $this->warehouseStorageBinRepository
        );

        self::assertTrue($aisleCreator->supports($this->autoGenerateData));
    }

    public function testItDoesNotSupport(): void
    {
        $this->autoGenerateData->shouldReceive('getStorageLevel')
                               ->once()
                               ->withNoArgs()
                               ->andReturn('test');

        $aisleCreator = new AisleCreator(
            $this->binFactory,
            $this->binDataSetter,
            $this->manager,
            $this->binIteratorFactory,
            $this->warehouseStorageBinRepository
        );

        self::assertFalse($aisleCreator->supports($this->autoGenerateData));
    }

    public function testPriority(): void
    {
        $aisleCreator = new AisleCreator(
            $this->binFactory,
            $this->binDataSetter,
            $this->manager,
            $this->binIteratorFactory,
            $this->warehouseStorageBinRepository
        );

        self::assertEquals(3, $aisleCreator->getPriority());
    }

    public function testCreate(): void
    {
        $aisleCreator = new AisleCreator(
            $this->binFactory,
            $this->binDataSetter,
            $this->manager,
            $this->binIteratorFactory,
            $this->warehouseStorageBinRepository
        );

        $aisleSerials = ['AA', 'AB'];

        $warehouse = Mockery::mock(Warehouse::class);
        $warehouse->shouldReceive('getId')
                  ->twice()
                  ->withNoArgs()
                  ->andReturn(1);

        $warehouseStorageArea = Mockery::mock(WarehouseStorageArea::class);
        $warehouseStorageArea->shouldReceive('getId')
                             ->twice()
                             ->withNoArgs()
                             ->andReturn(1);

        $binObject = Mockery::mock(WarehouseStorageBin::class);
        $binObject->shouldReceive('setType')
                  ->twice()
                  ->with(Mockery::type('string'))
                  ->andReturn($binObject);
        $binObject->shouldReceive('setSerial')
                  ->twice()
                  ->with(Mockery::type('string'))
                  ->andReturn($binObject);
        $binObject->shouldReceive('setParent')
                  ->twice()
                  ->with(null)
                  ->andReturn($binObject);

        $aisleIterator = Mockery::mock(AisleIterator::class);
        $aisleIterator->shouldReceive('toArray')
                      ->once()
                      ->withNoArgs()
                      ->andReturn($aisleSerials);

        $this->binIteratorFactory->shouldReceive('createIterator')
                                 ->once()
                                 ->with(Mockery::type('string'), $this->autoGenerateData)
                                 ->andReturn($aisleIterator);

        $this->autoGenerateData->shouldReceive('getWarehouse')
                               ->twice()
                               ->withNoArgs()
                               ->andReturn($warehouse);
        $this->autoGenerateData->shouldReceive('getWarehouseStorageArea')
                               ->twice()
                               ->withNoArgs()
                               ->andReturn($warehouseStorageArea);

        $this->warehouseStorageBinRepository->shouldReceive('getSerials')
                                            ->once()
                                            ->with(Mockery::type('array'))
                                            ->andReturn([]);

        $this->warehouseStorageBinRepository->shouldReceive('findOneBy')
                                            ->twice()
                                            ->with(Mockery::type('array'))
                                            ->andReturnNull();

        $this->binFactory->shouldReceive('make')
                         ->twice()
                         ->withNoArgs()
                         ->andReturn($binObject);

        $this->binDataSetter->shouldReceive('setData')
                            ->twice()
                            ->with($binObject, $this->autoGenerateData)
                            ->andReturn($binObject);

        $this->manager->shouldReceive('persist')
                      ->twice()
                      ->with(Mockery::type(WarehouseStorageBin::class))
                      ->andReturn();

        $unitOfWork = Mockery::mock(UnitOfWork::class);
        $unitOfWork->shouldReceive('getScheduledEntityInsertions')
                   ->twice()
                   ->withNoArgs()
                   ->andReturn([]);

        $this->manager->shouldReceive('getUnitOfWork')
                      ->twice()
                      ->withNoArgs()
                      ->andReturn($unitOfWork);

        $result = $aisleCreator->create($this->autoGenerateData);

        self::assertIsArray($result);
        self::assertCount(2, $result);
    }
}
