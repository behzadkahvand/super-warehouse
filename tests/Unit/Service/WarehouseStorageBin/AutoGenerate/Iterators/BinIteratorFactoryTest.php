<?php

namespace App\Tests\Unit\Service\WarehouseStorageBin\AutoGenerate\Iterators;

use App\Dictionary\StorageBinTypeDictionary;
use App\DTO\WarehouseStorageBinAutoGenerateData;
use App\Service\WarehouseStorageBin\AutoGenerate\Iterators\AisleIterator;
use App\Service\WarehouseStorageBin\AutoGenerate\Iterators\BayIterator;
use App\Service\WarehouseStorageBin\AutoGenerate\Iterators\BinIteratorFactory;
use App\Service\WarehouseStorageBin\AutoGenerate\Iterators\CellIterator;
use Mockery\Adapter\Phpunit\MockeryTestCase;

class BinIteratorFactoryTest extends MockeryTestCase
{
    private ?WarehouseStorageBinAutoGenerateData $autoGenerateData;

    public function setUp(): void
    {
        parent::setUp();

        $this->autoGenerateData = \Mockery::mock(WarehouseStorageBinAutoGenerateData::class);
    }

    public function tearDown(): void
    {
        $this->autoGenerateData = null;

        parent::tearDown();
    }

    /**
     * @dataProvider provideData
     */
    public function testCreateIterator(string $type, string $expectedIterator): void
    {
        $binIteratorFactory = new BinIteratorFactory();
        $this->autoGenerateData->shouldReceive('getStartValue')
                               ->once()
                               ->withNoArgs()
                               ->andReturn('AA');
        $this->autoGenerateData->shouldReceive('getEndValue')
                               ->once()
                               ->withNoArgs()
                               ->andReturn('A1');
        $this->autoGenerateData->shouldReceive('getIncrement')
                               ->once()
                               ->withNoArgs()
                               ->andReturn('01');

        self::assertInstanceOf($expectedIterator, $binIteratorFactory->createIterator($type, $this->autoGenerateData));
    }

    public function provideData(): array
    {
        return [
            [
                StorageBinTypeDictionary::AISLE,
                AisleIterator::class,
            ],
            [
                StorageBinTypeDictionary::BAY,
                BayIterator::class,
            ],
            [
                StorageBinTypeDictionary::CELL,
                CellIterator::class,
            ],
        ];
    }
}
