<?php

namespace App\Tests\Unit\Service\WarehouseStorageBin\AutoGenerate\Iterators;

use App\DTO\WarehouseStorageBinAutoGenerateData;
use App\Service\WarehouseStorageBin\AutoGenerate\Iterators\AisleIterator;
use Mockery\Adapter\Phpunit\MockeryTestCase;

class AisleIteratorTest extends MockeryTestCase
{
    private ?AisleIterator $aisleIterator;

    private ?WarehouseStorageBinAutoGenerateData $autoGenerateData;

    public function setUp(): void
    {
        parent::setUp();

        $this->autoGenerateData = \Mockery::mock(WarehouseStorageBinAutoGenerateData::class);
    }

    public function tearDown(): void
    {
        $this->autoGenerateData = null;
        $this->aisleIterator    = null;

        parent::tearDown();
    }

    public function testItIterateWithIncrement1Step(): void
    {
        $this->autoGenerateData->shouldReceive('getStartValue')
                               ->once()
                               ->withNoArgs()
                               ->andReturn('AA');

        $this->autoGenerateData->shouldReceive('getEndValue')
                               ->once()
                               ->withNoArgs()
                               ->andReturn('AC');
        $this->autoGenerateData->shouldReceive('getIncrement')
                               ->once()
                               ->withNoArgs()
                               ->andReturn('01');

        $this->aisleIterator = new AisleIterator($this->autoGenerateData);

        $expected = ['AA', 'AB', 'AC'];

        self::assertSame($expected, $this->aisleIterator->toArray());
    }

    public function testItIterateWithIncrement2Step(): void
    {
        $this->autoGenerateData->shouldReceive('getStartValue')
                               ->once()
                               ->withNoArgs()
                               ->andReturn('AA');

        $this->autoGenerateData->shouldReceive('getEndValue')
                               ->once()
                               ->withNoArgs()
                               ->andReturn('AC');
        $this->autoGenerateData->shouldReceive('getIncrement')
                               ->once()
                               ->withNoArgs()
                               ->andReturn('02');

        $this->aisleIterator = new AisleIterator($this->autoGenerateData);

        $expected = ['AA', 'AC'];

        self::assertSame($expected, $this->aisleIterator->toArray());
    }
}
