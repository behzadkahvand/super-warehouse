<?php

namespace App\Tests\Unit\Service\WarehouseStorageBin\AutoGenerate\Iterators;

use App\DTO\WarehouseStorageBinAutoGenerateData;
use App\Service\WarehouseStorageBin\AutoGenerate\Iterators\BayIterator;
use Mockery\Adapter\Phpunit\MockeryTestCase;

class BayIteratorTest extends MockeryTestCase
{
    private ?BayIterator $bayIterator;

    private ?WarehouseStorageBinAutoGenerateData $autoGenerateData;

    public function setUp(): void
    {
        parent::setUp();

        $this->autoGenerateData = \Mockery::mock(WarehouseStorageBinAutoGenerateData::class);
    }

    public function tearDown(): void
    {
        $this->autoGenerateData = null;
        $this->bayIterator      = null;

        parent::tearDown();
    }

    public function testItIterateWithIncrement1Step(): void
    {
        $this->autoGenerateData->shouldReceive('getStartValue')
                               ->once()
                               ->withNoArgs()
                               ->andReturn('AA-A1');

        $this->autoGenerateData->shouldReceive('getEndValue')
                               ->once()
                               ->withNoArgs()
                               ->andReturn('AB-A2');
        $this->autoGenerateData->shouldReceive('getIncrement')
                               ->once()
                               ->withNoArgs()
                               ->andReturn('01-01');

        $this->bayIterator = new BayIterator($this->autoGenerateData);

        $expected = ['AA-A1', 'AA-A2', 'AB-A1', 'AB-A2'];

        self::assertSame($expected, $this->bayIterator->toArray());
    }

    public function testItIterateWithIncrement2StepInBaySection(): void
    {
        $this->autoGenerateData->shouldReceive('getStartValue')
                               ->once()
                               ->withNoArgs()
                               ->andReturn('AA-A1');

        $this->autoGenerateData->shouldReceive('getEndValue')
                               ->once()
                               ->withNoArgs()
                               ->andReturn('AB-A2');
        $this->autoGenerateData->shouldReceive('getIncrement')
                               ->once()
                               ->withNoArgs()
                               ->andReturn('01-02');

        $this->bayIterator = new BayIterator($this->autoGenerateData);

        $expected = ['AA-A1', 'AB-A1'];

        self::assertSame($expected, $this->bayIterator->toArray());
    }

    public function testItIterateWithIncrement2StepInAisleSection(): void
    {
        $this->autoGenerateData->shouldReceive('getStartValue')
                               ->once()
                               ->withNoArgs()
                               ->andReturn('AA-A1');

        $this->autoGenerateData->shouldReceive('getEndValue')
                               ->once()
                               ->withNoArgs()
                               ->andReturn('AB-A2');
        $this->autoGenerateData->shouldReceive('getIncrement')
                               ->once()
                               ->withNoArgs()
                               ->andReturn('02-01');

        $this->bayIterator = new BayIterator($this->autoGenerateData);

        $expected = ['AA-A1', 'AA-A2'];

        self::assertSame($expected, $this->bayIterator->toArray());
    }
}
